// Mixins

// Calculates layout columns
@mixin calculate-columns($selector-string, $total-columns, $margin) {
  $selector: unquote($selector-string);

  @for $column-index from 1 through $total-columns {
    $percentage: ((100 / $column-index) + %);
    $width: if($margin, calc(#{$percentage} - #{$margin}), $percentage);

    #{$selector} {
      &:first-of-type {
        &:nth-last-of-type(#{$column-index}),
        &:nth-last-of-type(#{$column-index}) ~ #{$selector} {
          width: $width;
        }
      }
    }
  }
}

// Calculates font size and line height
@mixin calculate-type($font-size, $line-height: $font-size) {
  @include rem-property(font-size, $font-size);
  @include rem-property(line-height, $line-height);
}

// Returns breakpoints from the associated Sass map
@mixin media-query($breakpoint-name, $breakpoints: $breakpoints) {
  @if not map-has-key($breakpoints, $breakpoint-name) {
    @error 'Unknown breakpoint "#{$breakpoint-name}"';
  }

  @media #{map-get($breakpoints, $breakpoint-name)} {
    @content;
  }
}

// Calculates rem for a property with a pixel fallback
@mixin rem-property($property, $value, $divider: 1) {
  #{$property}: (($value * $desired-font-size) / $divider) + px;
  #{$property}: ($value / $divider) + rem;
}

// Returns z-index order for the element passed in
@mixin z-index($element) {
  z-index: index($z-index-order, $element);
}
